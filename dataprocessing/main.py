import reverse_geocoder as rg
import os
from PIL import Image
import pycountry
import pandas as pd
import json

offset_header_2dsf = 8


def open_folding(datafile, name):
    datafile.write('\n//<editor-fold defaultstate="collapsed" desc="{}">\n'.format(name))


def close_folding(datafile):
    datafile.write("//</editor-fold>\n")


def country_from_geolocation(lat, lon):
    results = rg.search((lat, lon))
    if len(results) == 0: return ""
    result = results[0]

    return pycountry.countries.get(alpha_2=result["cc"]).name


def create_2dsf(width, height):
    # if you change anything, also adjust offset_header_2dsf
    result = bytearray(8 + width * height)
    result[0] = (width & 0x000000FF)
    result[1] = (width & 0x0000FF00) >> 8
    result[2] = (width & 0x00FF0000) >> 16
    result[3] = (width & 0xFF000000) >> 24
    result[4] = (height & 0x000000FF)
    result[5] = (height & 0x0000FF00) >> 8
    result[6] = (height & 0x00FF0000) >> 16
    result[7] = (height & 0xFF000000) >> 24
    return result


def create_2dsf_from_covid_table_who(datafile, name):
    print("creating covid map data...")

    # load covid data
    df = pd.read_csv("data/WHO-COVID-19-global-table-data.csv", header=0)

    result = {}
    for index, row in df.iterrows():
        key = row["Name"]
        value = row["Cases - cumulative total"]

        # use cc codes instead of country names (we can fix this more easily to work with world geo data)
        cc = ""
        if key == "Global":
            cc = "GLOBAL"
        elif key == "Other":  # this will be recognized as united kingdom, dont ask me why
            cc = "OTHER"
        elif key == "The United Kingdom":
            cc = "GBR"
        elif key == "Iran (Islamic Republic of)":
            cc = "IRN"
        elif key == "Democratic Republic of the Congo":
            cc = "COD"
        elif key == "Venezuela (Bolivarian Republic of)":
            cc = "VEN"
        elif key == "United States Virgin Islands":
            cc = "VIR"
        elif key == "Northern Mariana Islands (Commonwealth of the)":
            cc = "MNP"
        elif key == "Micronesia (Federated States of)":
            cc = "FSM"
        elif key == "Côte d’Ivoire":
            cc = "CIV"
        elif key == "Bolivia (Plurinational State of)":
            cc = "BOL"
        else:
            try:
                cc = (pycountry.countries.search_fuzzy(key)[0]).alpha_3
            except:
                #print("failed for {}".format(key))
                continue  # block those unknown

        result[cc] = value

    open_folding(datafile, name)
    datafile.write('const {} = `'.format(name))
    datafile.write(json.dumps(result))
    datafile.write('`;\n')
    close_folding(datafile)


def create_2dsf_from_image(datafile, path, ignoregray=False):
    print("grayscaling {} ...".format(path))

    im = Image.open(path, 'r')
    width, height = im.size
    pixels = list(im.getdata())
    result = create_2dsf(width, height)

    for y in range(0, height):
        for x in range(0, width):
            i = offset_header_2dsf + y * width + x
            pixel = pixels[y * width + x]
            if ignoregray and (pixel[0] == pixel[1] and pixel[0] == pixel[2]):
                result[i] = 255
            else:
                result[i] = int((pixel[0] + pixel[1] + pixel[2]) / 3)

    name = os.path.basename(path).split(".")[0]
    open_folding(datafile, name)
    datafile.write('const {} = "'.format(name))
    datafile.write(result.hex())
    datafile.write('";\n')
    close_folding(datafile)


def create_worldmap(datafile):
    print("adding a worldmap ...")
    with open("data/world.geojson") as f:
        worldmap = f.read()
        open_folding(datafile, "worldmap")
        datafile.write('const {} = `'.format("worldmap"))
        datafile.write(worldmap)
        datafile.write('`;\n')
        close_folding(datafile)


if __name__ == '__main__':
    with open("../res/data.js", "w", encoding="utf-8") as datajs:
        open_folding(datajs, "AUTOGENERATED")

        create_worldmap(datajs)
        create_2dsf_from_image(datajs, "data/population_usa.png")
        create_2dsf_from_image(datajs, "data/population_world.png")
        create_2dsf_from_image(datajs, "data/islam_world.png")
        create_2dsf_from_image(datajs, "data/christianity_world.png")
        create_2dsf_from_image(datajs, "data/buddhist_world.png")
        create_2dsf_from_image(datajs, "data/ufo.png")
        create_2dsf_from_image(datajs, "data/austria_heightmap.jpg")
        create_2dsf_from_image(datajs, "data/germany_heightmap.png")
        create_2dsf_from_image(datajs, "data/generic_heightmap.png")
        create_2dsf_from_image(datajs, "data/heightmap_world.jpg")

        create_2dsf_from_covid_table_who(datajs, "covid")

        datajs.write("\n")
        close_folding(datajs)
